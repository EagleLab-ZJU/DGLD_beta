"""Before run this module ,you should run `common/save_datasets.py` to generate 
injected anomaly datasets by DGLD and pygod 
"""
import imp
import os,sys
current_file_name = __file__
current_dir=os.path.dirname(os.path.dirname(os.path.abspath(current_file_name)))
print('current_dir:',current_dir)
sys.path.append(current_dir)
from common.utils import load_mat_data2PyG,load_mat_data2dgl
from common.dataset import split_auc
data_path = current_dir+'/data/'
print('data_path:',data_path)

def test_model_on_diff_datasets(data_path,data_name,model,framework='DGLD'):
    """Test models from our framework DGLD and PyGod on datasets from DGLD and PyGod types.
    Datasets from DGL and PyG have same dict in mat file,
    they all have 'Network','Attributes' and 'Label'.

    Parameters
    ----------
    data_path : str
        mat file path
    data_name : str
        name of datasets
    model : _type_
        pygod and dgld models
    framework : str, optional
        models type ['DGLD','pygod'], by default 'DGLD'
    """
    dgld_data_path=os.path.join(data_path,data_name+'_dgld.mat')
    pygod_data_path=os.path.join(data_path,data_name+'_pygod.mat')      

    if framework=='DGLD':
        '''Test two types datasets on models from DGLD framework'''
        print('\n','Test model of DGLD on injected anomaly datasets generated by <<DGLD>>')
        graph=load_mat_data2dgl(dgld_data_path)
        model.fit(graph)
        outlier_scores = model.decision_function(data)
        print('Raw scores:')
        print(outlier_scores)
        split_auc(data.y,outlier_scores)

        print('Test model of DGLD on injected anomaly datasets generated by <<pygod>>')
        graph=load_mat_data2dgl(pygod_data_path)
        model.fit(graph)
        outlier_scores = model.decision_function(data)
        print('Raw scores:')
        print(outlier_scores)
        split_auc(data.y,outlier_scores)

    elif framework=='pygod':
        '''Test two types datasets on models from pygod framework'''
        print('Test model of pygod on injected anomaly datasets generated by <<pygod>>')
        data=load_mat_data2PyG(pygod_data_path)
        model.fit(data)
        outlier_scores = model.decision_function(data)
        print('Raw scores:')
        print(outlier_scores)
        split_auc(data.y,outlier_scores)

        print('\n','Test model of pygod on injected anomaly datasets generated by <<DGLD>>')
        data=load_mat_data2PyG(dgld_data_path)
        model.fit(data)
        outlier_scores = model.decision_function(data)
        print('Raw scores:')
        print(outlier_scores)
        split_auc(data.y,outlier_scores)



if __name__=="__main__":
    #import models from pygod or DGLD
    from pygod.models import DOMINANT
    model = DOMINANT()

    datasets=["Cora"]#, "Citeseer","Pubmed","BlogCatalog","Flickr","ogbn-arxiv"]
    for data_name in datasets:
        print('>'*30,data_name)
        test_model_on_diff_datasets(data_path,data_name,model,framework='pygod')

    
    
